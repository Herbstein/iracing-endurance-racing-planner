AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  Api:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - "http://localhost:9000"
        AllowMethods:
          - GET
          - POST
          - DELETE
          - PUT
          - OPTIONS
          - PATCH
        AllowHeaders:
          - Authorization
      Auth:
        Authorizers:
          GoogleOpenIdAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              audience:
                - "709154627100-fbcvr0njtbah2jfgv5bghnt7t39r28k9.apps.googleusercontent.com"
              issuer: "https://accounts.google.com"
        DefaultAuthorizer: GoogleOpenIdAuthorizer
  AddPlan:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Architectures: [ "arm64" ]
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10
      CodeUri: target/lambda/add-plan/
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: post
            Path: /plans
            PayloadFormatVersion: "2.0"
  GetPlan:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Architectures: [ "arm64" ]
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10
      CodeUri: target/lambda/get-plan/
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: get
            Path: /plans/{id}
            PayloadFormatVersion: "2.0"
  PatchPlan:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Architectures: [ "arm64" ]
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10
      CodeUri: target/lambda/patch-plan/
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: patch
            Path: /plans/{id}
            PayloadFormatVersion: "2.0"
  GetPlans:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Architectures: [ "arm64" ]
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10
      CodeUri: target/lambda/get-plans/
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: get
            Path: /plans
            PayloadFormatVersion: "2.0"
  GetUser:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Architectures: [ "arm64" ]
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10
      CodeUri: target/lambda/get-user/
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: get
            Path: /users/{id}
            PayloadFormatVersion: "2.0"
  AddUser:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Architectures: [ "arm64" ]
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10
      CodeUri: target/lambda/add-user/
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: post
            Path: /users
            PayloadFormatVersion: "2.0"
  Me:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Architectures: [ "arm64" ]
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10
      CodeUri: target/lambda/me/
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: get
            Path: /users/me
            PayloadFormatVersion: "2.0"