AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  DatabaseUrl:
    Type: String
    Description: The database connection string
  AllowedOrigin:
    Type: String
    Description: The valid origin for connecting to the api
  OAuthAudience:
    Type: String
    Description: The valid audience for OAuth authentication
  VpcSecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
  VpcSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  LambdaRole:
    Type: String

Globals:
  Function:
    VpcConfig:
      SecurityGroupIds: !Ref VpcSecurityGroupIds
      SubnetIds: !Ref VpcSubnetIds
    Environment:
      Variables:
        DATABASE_URL: !Ref DatabaseUrl

Resources:
  Api:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins: 
          - !Ref AllowedOrigin
        AllowMethods:
          - GET
          - POST
          - DELETE
          - PUT
          - OPTIONS
          - PATCH
        AllowHeaders:
          - Authorization
          - Content-Type
      Auth:
        Authorizers:
          GoogleOpenIdAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              audience:
                - !Ref OAuthAudience
              issuer: "https://accounts.google.com"
        DefaultAuthorizer: GoogleOpenIdAuthorizer
  AddPlan:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Architectures: [ "arm64" ]
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10
      CodeUri: target/lambda/add-plan/
      Role: !Ref LambdaRole
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: post
            Path: /plans
            PayloadFormatVersion: "2.0"
  GetPlan:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Architectures: [ "arm64" ]
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10
      CodeUri: target/lambda/get-plan/
      Role: !Ref LambdaRole
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: get
            Path: /plans/{id}
            PayloadFormatVersion: "2.0"
  PatchPlan:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Architectures: [ "arm64" ]
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10
      CodeUri: target/lambda/patch-plan/
      Role: !Ref LambdaRole
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: patch
            Path: /plans/{id}
            PayloadFormatVersion: "2.0"
  GetPlans:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Architectures: [ "arm64" ]
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10
      CodeUri: target/lambda/get-plans/
      Role: !Ref LambdaRole
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: get
            Path: /plans
            PayloadFormatVersion: "2.0"
  GetUser:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Architectures: [ "arm64" ]
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10
      CodeUri: target/lambda/get-user/
      Role: !Ref LambdaRole
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: get
            Path: /users/{id}
            PayloadFormatVersion: "2.0"
  AddUser:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Architectures: [ "arm64" ]
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10
      CodeUri: target/lambda/add-user/
      Role: !Ref LambdaRole
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: post
            Path: /users
            PayloadFormatVersion: "2.0"
  Me:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Architectures: [ "arm64" ]
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10
      CodeUri: target/lambda/me/
      Role: !Ref LambdaRole
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: get
            Path: /users/me
            PayloadFormatVersion: "2.0"
  AddSchedule:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Architectures: [ "arm64" ]
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10
      CodeUri: target/lambda/add-schedule/
      Role: !Ref LambdaRole
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: post
            Path: /plans/{id}/schedule
            PayloadFormatVersion: "2.0"
  GetSchedule:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Architectures: [ "arm64" ]
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10
      CodeUri: target/lambda/get-schedule/
      Role: !Ref LambdaRole
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: get
            Path: /plans/{id}/schedule
            PayloadFormatVersion: "2.0"
  PutSchedule:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Architectures: [ "arm64" ]
      Handler: bootstrap
      Runtime: provided.al2
      Timeout: 10
      CodeUri: target/lambda/put-schedule/
      Role: !Ref LambdaRole
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: put
            Path: /plans/{id}/schedule
            PayloadFormatVersion: "2.0"